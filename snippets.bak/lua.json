{
  "_G": {
    "body": "_G(${0:...})",
    "description": "5.1,5.2,5.3\n\n_G",
    "prefix": "_G"
  },
  "assert": {
    "body": "assert(${1:v}${2:[, message]})",
    "description": "5.1,5.2,5.3\n\nassert()",
    "prefix": "assert"
  },
  "collectgarbage": {
    "body": "collectgarbage(${1:[opt]}${2:[, arg]})",
    "description": "5.1,5.2,5.3\n\ncollectgarbage()",
    "prefix": "collectgarbage"
  },
  "getfenv": {
    "body": "getfenv(${0:...})",
    "description": "5.1\n\ngetfenv ([f])",
    "prefix": "getfenv"
  },
  "getmetatable": {
    "body": "getmetatable(${1:object})",
    "description": "5.1,5.2,5.3\n\ngetmetatable (object)",
    "prefix": "getmetatable"
  },
  "coroutine.running": {
    "body": "coroutine.running( )",
    "description": "5.1,5.2,5.3\n\ncoroutine.running",
    "prefix": "coroutine.running"
  },
  "coroutine.status": {
    "body": "coroutine.status( ${1:co} )",
    "description": "5.1,5.2,5.3\n\ncoroutine.status",
    "prefix": "coroutine.status"
  },
  "coroutine.wrap": {
    "body": "coroutine.wrap( ${1:function} )",
    "description": "5.1,5.2,5.3\n\ncoroutine.wrap",
    "prefix": "coroutine.wrap"
  },
  "coroutine.yield": {
    "body": "coroutine.yield( ${1:...} )",
    "description": "5.1,5.2,5.3\n\ncoroutine.yield",
    "prefix": "coroutine.yield"
  },
  "fori": {
    "body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend",
    "description": "for i,v in ipairs()",
    "prefix": "fori"
  },
  "forp": {
    "body": "for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend",
    "description": "for k,v in pairs()",
    "prefix": "forp"
  },
  "require": {
    "prefix": "req",
    "body": ["require(\"${1:module}\")"],
    "description": "Require module"
  },
  "return": {
    "prefix": "rt",
    "body": ["return $0"],
    "description": "return value"
  },
  "assigment": {
    "prefix": "ll",
    "body": ["local ${1:varName} = ${0:value}"],
    "description": "create a variable"
  },
  "local": {
    "prefix": "l",
    "body": ["local ${0}"],
    "description": "create a variable"
  },
  "locreq": {
    "prefix": "lreq",
    "body": ["local ${1:var} = require(\"${2:module}\")"],
    "description": "Require module as a variable"
  },
  "class": {
    "prefix": "cl",
    "body": [
      "${1:className} = {}\n",
      "$1.${2:new} = function($3)",
      "\tlocal ${4:varName} = ${5:{}}\n",
      "\t${6: --code}\n",
      "\treturn $4",
      "end"
    ],
    "description": "Create a class"
  },
  "if": {
    "prefix": "if",
    "body": ["if ${1:true} then", "\t$0", "end"]
  },
  "elseif": {
    "prefix": "elseif",
    "body": ["elseif ${1:true} then", "\t$0"]
  },
  "for": {
    "prefix": "for",
    "body": ["for ${1:i}=${2:1},${3:10} do", "\t$0", "end"],
    "description": "for loop range"
  },
  "foreach": {
    "prefix": "foreach",
    "body": ["for i, ${1:x} in pairs(${2:table}) do", "\t$0", "end"]
  },
  "forline": {
    "prefix": "forline",
    "body": [
      "f = io.open(${1:\"${2:filename}\"}, \"${3:r}\")\n",
      "while true do",
      "\tline = f:read()",
      "\tif line == nil then break end\n",
      "\t${0:-- code}",
      "end"
    ],
    "description": "read file line by line"
  },
  "function": {
    "prefix": "fu",
    "body": ["function ${1:name}($2)", "\t${3:-- code}", "end"]
  },
  "inline-function": {
    "prefix": "f=",
    "body": ["local ${1:name} = function($2)", "\t${0:-- code}", "end"]
  },
  "print": {
    "prefix": "p",
    "body": ["print(${0})"]
  },
  "self": {
    "prefix": "self:",
    "body": ["function self:${1:methodName}($2)", "\t$0", "end"]
  },
  "while": {
    "prefix": "while",
    "body": ["while ${1:true} do", "\t$0", "end"]
  }
}
